require 'time'
require 'json'

require_relative "config.rb"

HEAT_PIN_NAMES = [
    "bedheat", "e0heat", "e1heat", "!duex.e2heat", "!duex.e3heat",
    "!duex.e4heat", "!duex.e5heat", "!duex.e6heat"
]

TEMP_PIN_NAMES = [
    "bedtemp", "e0temp", "e1temp", "duex.e2temp", "duex.e3temp",
    "duex.e4temp", "duex.e5temp", "duex.e6temp"
]

FAN_PIN_NAMES = [
    "fan0", "fan1", "fan2", "duex.fan3", "duex.fan4", "duex.fan5",
    "duex.fan6", "duex.fan7", "duex.fan8"
]

ENDSTOP_PIN_NAMES = [
    "xstop", "ystop", "zstop", "e0stop", "e1stop", "duex.e2stop",
    "duex.e3stop", "duex.e4stop", "duex.e5stop", "duex.e6stop"
]

def format_arg(value)
    if value.is_a? Numeric
        return "#{value}"
    elsif value.is_a? String
        return "\"#{value.gsub('"', '""')}\""
    elsif value.is_a? Array
        return value.map{|x| format_arg(x)}.join(":")
    else
        raise TypeError 
    end
end

def command(cmd, args = {})
    command = cmd
    for key in args.keys
        value = args.fetch(key)
        command += " #{key}#{format_arg(value)}"
    end
    command + "\n"
end

def comment(msg)
    ";; #{msg}\n"
end

def blank
    "\n"
end

task :config do
    f = File.open "config.g", "w"

    f << comment("Jubilee Config File for RepRapFirmware 3")

    f << blank
    f << comment("Name and Identification")
    f << command("M550", P: Config::Machine::NAME) # Machine and Netbios name

    f << blank
    f << comment("Networking")
    f << command("M552", P: Config::Network::ADDR, S: 1) # Use Ethernet with a static IP address
    f << command("M553", P: Config::Network::NETMASK)    # Netmask
    f << command("M554", P: Config::Network::GATEWAY)    # Gateway

    f << blank
    f << comment("Debugging")
    f << command("M111", S: 0)                          # Debug off
    f << command("M929", P: Config::Machine::LOG, S: 1) # Start logging to disk

    f << blank
    f << comment("General Preferences")
    f << command("M555", P: 2) # Marlin-style output
    f << command("G21")        # Dimensions to mm
    f << command("G90")        # Send absolute coordinates
    f << command("M83")        # Relative extruder moves

    f << blank
    f << comment("Motor Drives")
    f << command("M584",                        # Map drivers
                 X: Config::Drives::X::NUMBER,
                 Y: Config::Drives::Y::NUMBER,
                 Z: Config::Drives::Z::NUMBERS,
                 E: Config::Drives::E::NUMBERS,
                 U: Config::Drives::U::NUMBER)
    f << command("M569", P: Config::Drives::X::NUMBER, S: Config::Drives::X::DIR) # Driver directions
    f << command("M569", P: Config::Drives::Y::NUMBER, S: Config::Drives::Y::DIR)
    for number in Config::Drives::Z::NUMBERS
        f << command("M569", P: number, S: Config::Drives::Z::DIR)
    end
    f << command("M569", P: Config::Drives::U::NUMBER, S: Config::Drives::U::DIR)
    for number in Config::Drives::E::NUMBERS
        f << command("M569", P: number, S: Config::Drives::Z::DIR, D: 2) # Extruder in Spreadcycle mode
    end
    f << command("M669", K: 1) # CoreXY mode

    f << blank
    f << comment("Kinematic bed ball locations")
    f << command("M671", X: Config::Bed::BALLS_X, Y: Config::Bed::BALLS_Y, S: Config::Bed::MAX_CORRECTION)

    f << blank
    f << comment("Bed mesh definition")
    f << command("M557",                          # Define area for mesh bed leveling
                 X: Config::Bed::MESH_X_BOUNDS,
                 Y: Config::Bed::MESH_Y_BOUNDS,
                 P: Config::Bed::MESH_SIZE)

    f << blank
    f << comment("Axes configuration")
    f << command("M350",                              # Set microstepping, use interpolation
                 X: Config::Drives::X::MICROSTEPPING,
                 Y: Config::Drives::Y::MICROSTEPPING,
                 Z: Config::Drives::Z::MICROSTEPPING,
                 E: Config::Drives::U::MICROSTEPPING,
                 U: Config::Drives::E::MICROSTEPPING,
                 I: 1)
    f << command("M906",                              # Set motor currents in mA, and idle percentage
                 X: Config::Drives::X::MAX_CURRENT,
                 Y: Config::Drives::Y::MAX_CURRENT,
                 Z: Config::Drives::Z::MAX_CURRENT,
                 U: Config::Drives::U::MAX_CURRENT,
                 E: Config::Drives::E::MAX_CURRENT,
                 I: Config::Drives::IDLE_CURRENT_PERCENTAGE)
    f << command("M203",                              # Max speeds
                 X: Config::Drives::X::MAX_SPEED,
                 Y: Config::Drives::Y::MAX_SPEED,
                 Z: Config::Drives::Z::MAX_SPEED,
                 U: Config::Drives::U::MAX_SPEED,
                 E: Config::Drives::E::MAX_SPEED)
    f << command("M201",                              # Max accelerations
                 X: Config::Drives::X::MAX_ACCEL,
                 Y: Config::Drives::Y::MAX_ACCEL,
                 Z: Config::Drives::Z::MAX_ACCEL,
                 U: Config::Drives::U::MAX_ACCEL,
                 E: Config::Drives::E::MAX_ACCEL)
    f << command("M566",                              # Max jerk
                 X: Config::Drives::X::MAX_JERK,
                 Y: Config::Drives::Y::MAX_JERK,
                 Z: Config::Drives::Z::MAX_JERK,
                 U: Config::Drives::U::MAX_JERK,
                 E: Config::Drives::E::MAX_JERK)
    f << command("M92",                               # Steps per unit
                 X: Config::Drives::X::STEPS_PER_MM,
                 Y: Config::Drives::Y::STEPS_PER_MM,
                 Z: Config::Drives::Z::STEPS_PER_MM,
                 U: Config::Drives::U::STEPS_PER_DEG,
                 E: Config::Drives::E::STEPS_PER_MM)
    f << command("M208",                              # Software endstop limits
                 X: Config::Drives::X::SOFT_LIMITS,
                 Y: Config::Drives::Y::SOFT_LIMITS,
                 Z: Config::Drives::Z::SOFT_LIMITS,
                 U: Config::Drives::U::SOFT_LIMITS)

    f << blank
    f << comment("Endstops")
    f << command("M574",
                 X: Config::Endstops::X::POS,
                 S: 1,
                 P: (Config::Endstops::X::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::X::PIN])
    f << command("M574",
                 X: Config::Endstops::Y::POS,
                 S: 1,
                 P: (Config::Endstops::Y::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Y::PIN])
    f << command("M574",
                 X: Config::Endstops::Z::POS,
                 S: 1,
                 P: (Config::Endstops::Z::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Z::PIN])
    f << command("M574",
                 X: Config::Endstops::U::POS,
                 S: 1,
                 P: (Config::Endstops::U::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::U::PIN])

    f << blank
    f << comment("Z Probe")
    #f << command("M574", Z: 0, P: "nil") # no Z endstop switch, free up endstop input
    f << command("M558",
                 P: 5,
                 C: (Config::Endstops::Z::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Z::PIN],
                 H: Config::Bed::PROBE_DIVE,
                 A: 1,
                 T: Config::Bed::PROBE_SPEED,
                 S: Config::Bed::PROBE_TOLERANCE)

    f << blank
    f << comment("Bed Heater")
    f << command("M308",                           # Define bed thermistor as sensor 0
                 S: Config::Thermistors::Bed::NUM,
                 P: TEMP_PIN_NAMES[Config::Thermistors::Bed::NUM],
                 T: Config::Thermistors::Bed::T,
                 B: Config::Thermistors::Bed::B,
                 R: Config::Thermistors::Bed::R)
    f << command("M950",                           # Define bed heater as heater 0
                 H: Config::Heaters::Bed::NUM,
                 C: HEAT_PIN_NAMES[Config::Heaters::Bed::NUM],
                 T: Config::Thermistors::Bed::NUM)
    f << command("M143", H: Config::Heaters::Bed::NUM, S: Config::Heaters::Bed::MAX_TEMP) # Bed max temp
    f << command("M140", H: Config::Heaters::Bed::NUM) # Set bed heater

    f << blank
    f << comment("Extruder Heaters")
    for i in 0...Config::Machine::N_TOOLS
        f << command("M308",                                                     # Define extruder thermistor
                     S: Config::Thermistors::Extruders::NUMS[i],
                     P: TEMP_PIN_NAMES[Config::Thermistors::Extruders::NUMS[i]],
                     T: Config::Thermistors::Extruders::T,
                     B: Config::Thermistors::Extruders::B,
                     R: Config::Thermistors::Extruders::R)
        f << command("M950",                                                     # Define extruder heater
                     H: Config::Heaters::Extruders::NUMS[i],
                     C: HEAT_PIN_NAMES[Config::Heaters::Extruders::NUMS[i]],
                     T: Config::Thermistors::Extruders::NUMS[i])
        f << command("M950",                                                     # Define part fan
                     F: Config::Fans::PART_FAN_PINS[i],
                     C: FAN_PIN_NAMES[Config::Fans::PART_FAN_PINS[i]])
        f << command("M950",                                                     # Define hotend fan
                     F: Config::Fans::END_FAN_PINS[i],
                     C: FAN_PIN_NAMES[Config::Fans::END_FAN_PINS[i]])
        f << command("M106",                                                     # Enable thermostatic control on hotend fan
                     P: Config::Fans::END_FAN_PINS[i],
                     H: Config::Heaters::Extruders::NUMS[i],
                     T: Config::Fans::HE_ON_TEMP)
        f << command("M143", H: Config::Heaters::Extruders::NUMS[i], S: Config::Heaters::Extruders::MAX_TEMP) # Max hotend temp
    end

    f << blank
    f << comment("Tools")
    for i in 0...Config::Machine::N_TOOLS
        f << command("M563",                                  # Define tool with drive, heater, part fan
                     P: i,
                     S: "Extruder #{i + 1}",
                     D: Config::Drives::E::NUMBERS[i],
                     H: Config::Heaters::Extruders::NUMS[i],
                     F: Config::Fans::PART_FAN_PINS[i])
        f << command("G10",                                   # Set tool offsets from z probe
                     P: i,
                     X: Config::Tools::NOZZLE_OFFSETS[i][:X],
                     Y: Config::Tools::NOZZLE_OFFSETS[i][:Y],
                     Z: Config::Tools::NOZZLE_OFFSETS[i][:Z])
        f << command("G10",                                   # Turn heater off
                     P: i,
                     S: -273,
                     R: -273)
        f << command("M572",                                  # Pressure advance
                     D: Config::Drives::E::NUMBERS[i],
                     S: Config::Drives::E::PRESSURE_ADVANCE)
    end

    f << blank
    f << comment("Misc")
    f << command("M501")                               # Load config-override.g
    f << command("M551", P: Config::Machine::PASSWORD) # Set password
end

task :homeall do
    f = File.open "homeall.g", "w"
end

task :homeu do
    f = File.open "homeu.g", "w"
end

task :homex do
    f = File.open "homex.g", "w"
end

task :homey do
    f = File.open "homey.g", "w"
end

task :homez do
    f = File.open "homez.g", "w"
end

task :bed do
    f = File.open "bed.g", "w"
end

task :pause do
    f = File.open "pause.g", "w"
end

task :resume do
    f = File.open "resume.g", "w"
end

task :start do
    f = File.open "start.g", "w"
end

task :stop do
    f = File.open "stop.g", "w"
end

task :tfree do
    for i in 0...Config::Machine::N_TOOLS
        f = File.open "tfree#{i}.g", "w"
    end
end

task :tpre do
    for i in 0...Config::Machine::N_TOOLS
        f = File.open "tpre#{i}.g", "w"
    end
end

task :tpost do
    for i in 0...Config::Machine::N_TOOLS
        f = File.open "tpost#{i}.g", "w"
    end
end

task :cancel do
    f = File.open "cancel.g", "w"
end

task :clean do
    `rm *.g`
end

task :default => [:config, :homeall, :homeu, :homex, :homey, :homez, :bed, :pause, :resume, :start, :stop, :tfree, :tpre, :tpost, :cancel]
