require 'time'
require 'json'
require 'fileutils'

require_relative "config.rb"

HEAT_PIN_NAMES = [
    "bedheat", "e0heat", "e1heat", "duex.e2heat", "duex.e3heat",
    "duex.e4heat", "duex.e5heat", "duex.e6heat"
]

TEMP_PIN_NAMES = [
    "bedtemp", "e0temp", "e1temp", "duex.e2temp", "duex.e3temp",
    "duex.e4temp", "duex.e5temp", "duex.e6temp"
]

FAN_PIN_NAMES = [
    "fan0", "fan1", "fan2", "duex.fan3", "duex.fan4", "duex.fan5",
    "duex.fan6", "duex.fan7", "duex.fan8"
]

ENDSTOP_PIN_NAMES = [
    "xstop", "ystop", "zstop", "e0stop", "e1stop", "duex.e2stop",
    "duex.e3stop", "duex.e4stop", "duex.e5stop", "duex.e6stop"
]

def format_arg(value, omit_quotes = false)
    if value.nil?
        return ""
    elsif value.is_a? Numeric
        return "#{value}"
    elsif value.is_a? String
        if omit_quotes
            return value
        else
            return "\"#{value.gsub('"', '""')}\""
        end
    elsif value.is_a? Array
        return value.map{|x| format_arg(x)}.join(":")
    else
        raise TypeError 
    end
end

def command(cmd, args = {})
    command = cmd
    for key in args.keys
        value = args.fetch(key)
        if ["M552", "M553", "M554"].include? cmd
            command += " #{key}#{format_arg(value, true)}"
        else
            command += " #{key}#{format_arg(value)}"
        end
    end
    command + "\n"
end

def meta(header, *subcommands)
    header + "\n  " + subcommands.join("").strip.gsub("\n", "\n  ") + "\n"
end

def comment(msg)
    ";; #{msg}\n"
end

def blank
    "\n"
end

task :config do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/config.g", "w"

    f << comment("Jubilee Config File for RepRapFirmware 3")

    f << blank
    f << comment("Name and Identification")
    f << command("M550", P: Config::Machine::NAME) # Machine and Netbios name

    f << blank
    f << comment("Networking")
    f << command("M552", P: Config::Network::ADDR, S: 1) # Use Ethernet with a static IP address
    f << command("M553", P: Config::Network::NETMASK)    # Netmask
    f << command("M554", P: Config::Network::GATEWAY)    # Gateway

    f << blank
    f << comment("Debugging")
    f << command("M111", S: 0)                          # Debug off
    f << command("M929", P: Config::Machine::LOG, S: 1) # Start logging to disk

    f << blank
    f << comment("General Preferences")
    f << command("M555", P: 2) # Marlin-style output
    f << command("G21")        # Dimensions to mm
    f << command("G90")        # Send absolute coordinates
    f << command("M83")        # Relative extruder moves

    f << blank
    f << comment("Motor Drives")
    f << command("M584",                        # Map drivers
                 X: Config::Drives::X::NUMBER,
                 Y: Config::Drives::Y::NUMBER,
                 Z: Config::Drives::Z::NUMBERS,
                 E: Config::Drives::E::NUMBERS,
                 U: Config::Drives::U::NUMBER)
    f << command("M569", P: Config::Drives::X::NUMBER, S: Config::Drives::X::DIR) # Driver directions
    f << command("M569", P: Config::Drives::Y::NUMBER, S: Config::Drives::Y::DIR)
    for number in Config::Drives::Z::NUMBERS
        f << command("M569", P: number, S: Config::Drives::Z::DIR)
    end
    f << command("M569", P: Config::Drives::U::NUMBER, S: Config::Drives::U::DIR)
    for number in Config::Drives::E::NUMBERS
        f << command("M569", P: number, S: Config::Drives::Z::DIR, D: 2) # Extruder in Spreadcycle mode
    end
    f << command("M669", K: 1) # CoreXY mode

    f << blank
    f << comment("Kinematic bed ball locations")
    f << command("M671", X: Config::Bed::BALLS_X, Y: Config::Bed::BALLS_Y, S: Config::Bed::MAX_CORRECTION)

    f << blank
    f << comment("Bed mesh definition")
    f << command("M557",                          # Define area for mesh bed leveling
                 X: Config::Bed::MESH_X_BOUNDS,
                 Y: Config::Bed::MESH_Y_BOUNDS,
                 P: Config::Bed::MESH_SIZE)

    f << blank
    f << comment("Axes configuration")
    f << command("M350",                              # Set microstepping, use interpolation
                 X: Config::Drives::X::MICROSTEPPING,
                 Y: Config::Drives::Y::MICROSTEPPING,
                 Z: Config::Drives::Z::MICROSTEPPING,
                 U: Config::Drives::U::MICROSTEPPING,
                 E: Config::Drives::E::MICROSTEPPING,
                 I: 1)
    f << command("M906",                              # Set motor currents in mA, and idle percentage
                 X: Config::Drives::X::MAX_CURRENT,
                 Y: Config::Drives::Y::MAX_CURRENT,
                 Z: Config::Drives::Z::MAX_CURRENT,
                 U: Config::Drives::U::MAX_CURRENT,
                 E: Config::Drives::E::MAX_CURRENT,
                 I: Config::Drives::IDLE_CURRENT_PERCENTAGE)
    f << command("M203",                              # Max speeds
                 X: Config::Drives::X::MAX_SPEED,
                 Y: Config::Drives::Y::MAX_SPEED,
                 Z: Config::Drives::Z::MAX_SPEED,
                 U: Config::Drives::U::MAX_SPEED,
                 E: Config::Drives::E::MAX_SPEED)
    f << command("M201",                              # Max accelerations
                 X: Config::Drives::X::MAX_ACCEL,
                 Y: Config::Drives::Y::MAX_ACCEL,
                 Z: Config::Drives::Z::MAX_ACCEL,
                 U: Config::Drives::U::MAX_ACCEL,
                 E: Config::Drives::E::MAX_ACCEL)
    f << command("M566",                              # Max jerk
                 X: Config::Drives::X::MAX_JERK,
                 Y: Config::Drives::Y::MAX_JERK,
                 Z: Config::Drives::Z::MAX_JERK,
                 U: Config::Drives::U::MAX_JERK,
                 E: Config::Drives::E::MAX_JERK)
    f << command("M92",                               # Steps per unit
                 X: Config::Drives::X::STEPS_PER_MM,
                 Y: Config::Drives::Y::STEPS_PER_MM,
                 Z: Config::Drives::Z::STEPS_PER_MM,
                 U: Config::Drives::U::STEPS_PER_DEG,
                 E: Config::Drives::E::STEPS_PER_MM)
    f << command("M208",                              # Software endstop limits
                 X: Config::Drives::X::SOFT_LIMITS,
                 Y: Config::Drives::Y::SOFT_LIMITS,
                 Z: Config::Drives::Z::SOFT_LIMITS,
                 U: Config::Drives::U::SOFT_LIMITS)

    f << blank
    f << comment("Endstops")
    f << command("M574",
                 X: Config::Endstops::X::POS,
                 S: 1,
                 P: (Config::Endstops::X::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::X::PIN])
    f << command("M574",
                 Y: Config::Endstops::Y::POS,
                 S: 1,
                 P: (Config::Endstops::Y::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Y::PIN])
    f << command("M574",
                 Z: Config::Endstops::Z::POS,
                 S: 1,
                 P: (Config::Endstops::Z::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Z::PIN])
    f << command("M574",
                 U: Config::Endstops::U::POS,
                 S: 1,
                 P: (Config::Endstops::U::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::U::PIN])

    f << blank
    f << comment("Z Probe")
    f << command("M574", Z: 0, P: "nil") # no Z endstop switch, free up endstop input
    f << command("M558",
                 P: 5,
                 C: (Config::Endstops::Z::PULLUP ? "^" : "") + ENDSTOP_PIN_NAMES[Config::Endstops::Z::PIN],
                 H: Config::Bed::PROBE_DIVE,
                 A: 1,
                 T: Config::Bed::PROBE_SPEED,
                 S: Config::Bed::PROBE_TOLERANCE)

    f << blank
    f << comment("Bed Heater")
    f << command("M308",                           # Define bed thermistor as sensor 0
                 S: Config::Thermistors::Bed::NUM,
                 P: TEMP_PIN_NAMES[Config::Thermistors::Bed::NUM],
                 Y: "thermistor",
                 A: "Bed",
                 T: Config::Thermistors::Bed::T,
                 B: Config::Thermistors::Bed::B,
                 R: Config::Thermistors::Bed::R)
    f << command("M950",                           # Define bed heater as heater 0
                 H: Config::Heaters::Bed::NUM,
                 C: HEAT_PIN_NAMES[Config::Heaters::Bed::NUM],
                 T: Config::Thermistors::Bed::NUM)
    f << command("M143", H: Config::Heaters::Bed::NUM, S: Config::Heaters::Bed::MAX_TEMP) # Bed max temp
    f << command("M140", H: Config::Heaters::Bed::NUM) # Set bed heater

    f << blank
    f << comment("Extruder Heaters")
    for i in 0...Config::Machine::N_TOOLS
        f << command("M308",                                                     # Define extruder thermistor
                     S: Config::Thermistors::Extruders::NUMS[i],
                     P: TEMP_PIN_NAMES[Config::Thermistors::Extruders::NUMS[i]],
                     Y: "thermistor",
                     A: "E#{i + 1}",
                     T: Config::Thermistors::Extruders::T,
                     B: Config::Thermistors::Extruders::B,
                     R: Config::Thermistors::Extruders::R)
        f << command("M950",                                                     # Define extruder heater
                     H: Config::Heaters::Extruders::NUMS[i],
                     C: HEAT_PIN_NAMES[Config::Heaters::Extruders::NUMS[i]],
                     T: Config::Thermistors::Extruders::NUMS[i])
        f << command("M950",                                                     # Define part fan
                     F: Config::Fans::PART_FAN_PINS[i],
                     C: FAN_PIN_NAMES[Config::Fans::PART_FAN_PINS[i]])
        f << command("M950",                                                     # Define hotend fan
                     F: Config::Fans::END_FAN_PINS[i],
                     C: FAN_PIN_NAMES[Config::Fans::END_FAN_PINS[i]])
        f << command("M106",                                                     # Enable thermostatic control on hotend fan
                     P: Config::Fans::END_FAN_PINS[i],
                     H: Config::Thermistors::Extruders::NUMS[i],
                     T: Config::Fans::HE_ON_TEMP)
        f << command("M143", H: Config::Heaters::Extruders::NUMS[i], S: Config::Heaters::Extruders::MAX_TEMP) # Max hotend temp
    end

    f << blank
    f << comment("Tools")
    for i in 0...Config::Machine::N_TOOLS
        f << command("M563",                                  # Define tool with drive, heater, part fan
                     P: i,
                     S: "Extruder #{i + 1}",
                     D: i,
                     H: Config::Heaters::Extruders::NUMS[i],
                     F: Config::Fans::PART_FAN_PINS[i])
        f << command("G10",                                   # Set tool offsets from z probe
                     P: i,
                     X: Config::Tools::NOZZLE_OFFSETS[i][:X],
                     Y: Config::Tools::NOZZLE_OFFSETS[i][:Y],
                     Z: Config::Tools::NOZZLE_OFFSETS[i][:Z])
        f << command("G10",                                   # Turn heater off
                     P: i,
                     S: -273.15,
                     R: -273.15)
        f << command("M572",                                  # Pressure advance
                     D: i,
                     S: Config::Drives::E::PRESSURE_ADVANCE)
    end

    f << blank
    f << comment("Misc")
    f << command("M501")                               # Load config-override.g
    f << command("M551", P: Config::Machine::PASSWORD) # Set password
end

task :homeall do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/homeall.g", "w"

    f << command("G91")                    # relative moves
    f << command("G1", Z: 5, F: 800, H: 2) # lift z
    f << command("M98", P: "homeu.g")
    f << command("M98", P: "homey.g")
    f << command("M98", P: "homex.g")
    f << command("M98", P: "homez.g")
end

task :homeu do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/homeu.g", "w"

    f << command("G90")                        # absolute moves
    f << command("G92", U: 0)                  # set curr pos as 0
    f << command("G1", U: 5, H: 2,             # move 2 degrees off switch
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G1", U: 120, H: 1,           # move to 170deg, or until switch is triggered
                 F: Config::Speeds::LOCK_SPEED)
    f << command("M400")                       # wait for move to complete

    f << meta("if abs(move.axes[3].userPosition - 120) > 1",
              command("M84", U: nil),
              command("M291",
                      R: "Intervention Required",
                      P: "Please remove the tool and return it to its post, and restore the twist lock to its horizontal position.  Press OK when done",
                      S: 3))
    f << command("T-1 P0")                     # deselect tool without moving

    f << command("G91")                        # relative moves
    f << command("G1", U: -360, H: 1,          # go to endstop
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G1", U: 6,                   # back off endstop
                 F: Config::Speeds::LOCK_SPEED / 2)
    f << command("G1", U: -15, H: 1,           # go to endstop slowly
                 F: Config::Speeds::LOCK_SPEED / 2)
    f << command("G90")                        # absolute moves
end

task :homex do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/homex.g", "w"

    f << command("G90") # absolute moves
    f << meta("if !move.axes[3].homed",      # Make sure the lock actuator is homed
              command("M291",
                      R: "Cannot Home X",
                      P: "U axis must be homed before X to prevent damage to tool. Press OK to home U or Cancel to abort",
                      S: 3),
              command("M98", P: "homeu.g"))
    f << meta("if !move.axes[1].homed",      # Make sure the Y axis is homed
              command("M291",
                      R: "Cannot Home X",
                      P: "Y axis must be homed before X to prevent damage to tool. Press OK to home Y or Cancel to abort",
                      S: 3),
              command("M98", P: "homey.g"))
    f << meta("if move.axes[1].userPosition >= #{Config::Drives::Y::SOFT_LIMITS[1] - 20}",   # Make sure the head won't collide with parked tools
              command("G0",
                      Y: Config::Drives::Y::SOFT_LIMITS[1] - 20,
                      F: Config::Speeds::HOMING_XY))
    f << meta("if state.currentTool != -1",  # Make sure there is no active tool
              command("M84", U: nil), # disable lock stepper
              command("M291",
                      R: "Cannot Home X",
                      P: "Tool must be deselected before homing. The tool has been unlocked, manually dock it and press OK to continue or Cancel to abort",
                      S: 3),
              command("M98", P: "homeu.g"))
    f << meta("if sensors.endstops[0].triggered",  # Make sure the endstop isn't already triggered (could be broken wire)
              command("M291",
                      R: "Cannot Home X",
                      P: "X Endstop is already triggered!",
                      S: 2),
              meta("abort \"X Endstop was triggered before homing.\""))

    f << command("G91") # Relative moves
    f << command("G1",  # Go to endstop
                 X: Config::Drives::X::SOFT_LIMITS[0] - Config::Drives::X::SOFT_LIMITS[1] - 20,
                 F: Config::Speeds::HOMING_XY,
                 H: 1)
    f << command("G1",  # Back off endstop
                 X: 4,
                 F: Config::Speeds::HOMING_XY / 5)
    f << command("G1",  # Go to endstop again, at slower speed
                 X: -10,
                 F: Config::Speeds::HOMING_XY / 5,
                 H: 1)
    f << command("G1",  # Relieve pressure from endstop
                 X: 2,
                 F: Config::Speeds::HOMING_XY / 5)
    f << command("G90") # Absolute moves
end

task :homey do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/homey.g", "w"

    f << meta("if sensors.endstops[1].triggered",  # Make sure the endstop isn't already triggered (could be broken wire)
              command("M291",
                      R: "Cannot Home Y",
                      P: "Y Endstop is already triggered!",
                      S: 2),
              meta("abort \"Y Endstop was triggered before homing.\""))

    f << command("G91") # Relative moves
    f << command("G1",  # Go to endstop
                 Y: Config::Drives::Y::SOFT_LIMITS[0] - Config::Drives::Y::SOFT_LIMITS[1] - 20,
                 F: Config::Speeds::HOMING_XY,
                 H: 1)
    f << command("G1",  # Back off endstop
                 Y: 4,
                 F: Config::Speeds::HOMING_XY / 5)
    f << command("G1",  # Go to endstop again, at slower speed
                 Y: -10,
                 F: Config::Speeds::HOMING_XY / 5,
                 H: 1)
    f << command("G1",  # Relieve pressure from endstop
                 Y: 1,
                 F: Config::Speeds::HOMING_XY / 5)
    f << command("G90") # Absolute moves
end

task :homez do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/homez.g", "w"

    f << meta("if !move.axes[3].homed", # check u
              command("M291",
                      R: "Cannot Home Z",
                      P: "U axis must be homed before Z to prevent damage to tool. Press OK to home U or Cancel to abort",
                      S: 3),
              command("M98", P: "homeu.g"))
    f << meta("if !move.axes[0].homed || !move.axes[1].homed", # must home x and y before z
              command("M291",
                      R: "Cannot Home Z",
                      P: "X and Y axes must be homed before Z for probing. Press OK to home X and Y or Cancel to abort",
                      S: 3),
              command("M98", P: "homey.g"),
              command("M98", P: "homex.g"))
    f << meta("if state.currentTool != -1",  # Make sure there is no active tool
              command("M84", U: nil), # disable lock stepper
              command("M291",
                      R: "Cannot Home Z",
                      P: "Tool must be deselected before homing. The tool has been unlocked, manually dock it and press OK to continue or Cancel to abort",
                      S: 3),
              command("M98", P: "homeu.g"))
    f << meta("if sensors.probes[0].value[0] != 0",
              command("M291",
                      R: "Cannot Home Z",
                      P: "Z probe is already triggered!",
                      S: 2),
              meta("abort \"Z probe was triggered before homing.\""))

    f << command("M561")                                     # disable mesh compensation
    f << command("G90")                                      # absolute moves
    f << command("G1",                                       # go to center
                 X: Config::Drives::X::SOFT_LIMITS.sum / 2,
                 Y: Config::Drives::Y::SOFT_LIMITS.sum / 2,
                 F: Config::Speeds::HOMING_XY)
    f << command("M558", F: Config::Speeds::HOMING_Z)        # probe speed
    f << command("G30")                                      # do a single probe here
    f << command("M558", F: Config::Speeds::HOMING_Z / 10)   # slower
    f << command("G30")                                      # do a single probe here
    f << command("G32")                                      # run bed.g
    f << command("G1",                                       # go back home
                 X: Config::Drives::X::SOFT_LIMITS[0] + 2,
                 Y: Config::Drives::Y::SOFT_LIMITS[0] + 1,
                 F: Config::Speeds::HOMING_XY)
    f << command("G29", S: 1)                                # enable mesh bed compensation
end

task :bed do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/bed.g", "w"

    f << command("M561")               # disable mesh compensation
    i = 0
    for point in Config::Bed::PROBE_POINTS
        f << command("G1",             # go to next point
                     X: point[:X],
                     Y: point[:Y],
                     F: Config::Speeds::HOMING_XY)
        if i == Config::Bed::PROBE_POINTS.length - 1
            f << command("G30", P: i, Z: -99999, S: i + 1)  # probe and calibrate
        else
            f << command("G30", P: i, Z: -99999)            # probe
        end
        i += 1
    end
    f << command("G29", S: 1)          # enable compensation
end

task :pause do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/pause.g", "w"

    f << command("M83")                                           # relative extruder moves
    f << command("G1", E: -3, F: Config::Speeds::PAUSE_RETRACT)   # retract
    f << command("G91")                                           # relative moves
    f << command("G1", Z: 30, F: Config::Speeds::PAUSE_Z)         # lower bed
    f << command("G90")                                           # absolute moves
    f << command("G1",                                            # move tool out of way
                 X: Config::Drives::X::SOFT_LIMITS[1] - 10,
                 Y: Config::Drives::Y::SOFT_LIMITS[0] + 100,
                 F: Config::Speeds::PAUSE_XY)
end

task :resume do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/resume.g", "w"

    f << command("G1", R: 1, X: 0, Y: 0, Z: 5, F: Config::Speeds::PAUSE_XY)  # go to postion fo last print move
    f << command("G1", R: 1, X: 0, Y: 0, Z: 0, F: Config::Speeds::PAUSE_Z)   # lower to print
    f << command("M83")                                                      # relative extruder moves
    f << command("G1", E: 3, F: Config::Speeds::PAUSE_RETRACT)               # deretract
end

task :start do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/start.g", "w"
end

task :stop do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/stop.g", "w"

    f << command("M83")                                        # relative extruder moves
    f << command("G1", E: -10, F: Config::Speeds::END_RETRACT) # retract
    f << command("G91")                                        # relative moves
    f << command("G1", Z: 2, F: Config::Speeds::PAUSE_Z)       # raise nozzle
    f << command("G90")                                        # absolute moves
    f << command("T-1")                                        # park tool
    f << command("G0",                                         # go back home
                 X: Config::Drives::X::SOFT_LIMITS[0] + 2,
                 Y: Config::Drives::Y::SOFT_LIMITS[0] + 1,
                 F: Config::Speeds::HOMING_XY)
    for i in 0...Config::Machine::N_TOOLS
        f << command("G10", P: i, R: -273.15, S: -273.15)      # disable tool heater
    end
    f << command("M140", S: -273.15)                           # disable bed heater
    f << command("M84")                                        # disable steppers
end

task :tfree do
    for i in 0...Config::Machine::N_TOOLS
        FileUtils.mkdir_p "sys"
        f = File.open "sys/tfree#{i}.g", "w"

        f << command("G91")                                  # relative moves
        f << command("G1", Z: 2, F: Config::Speeds::PAUSE_Z) # raise nozzle
        f << command("G90")                                  # absolute moves
        f << command("G53 G1",                               # go to parking approach position
                     X: Config::Tools::PARKING_X[i],
                     Y: Config::Tools::PARKING_APPROACH_Y,
                     F: Config::Speeds::PARK_XY)
        f << command("G53 G1",                               # push tool onto parking posts
                     Y: Config::Tools::PARKING_Y,
                     F: Config::Speeds::PARK_XY)
        f << command("M98", P: "/macros/tool_unlock.g")      # unlock the tool
        f << command("G53 G1",                               # pull away from parked tool
                     Y: Config::Tools::PARKING_APPROACH_Y,
                     F: Config::Speeds::PARK_XY)
    end
end

task :tpre do
    for i in 0...Config::Machine::N_TOOLS
        FileUtils.mkdir_p "sys"
        f = File.open "sys/tpre#{i}.g", "w"

        f << command("G90")                                  # absolute moves
        f << command("G0",                                   # go to parking approach position
                     X: Config::Tools::PARKING_X[i],
                     Y: Config::Tools::PARKING_APPROACH_Y,
                     F: Config::Speeds::PARK_XY)
        f << command("G60", S: 0)                            # save current position
    end
end

task :tpost do
    for i in 0...Config::Machine::N_TOOLS
        FileUtils.mkdir_p "sys"
        f = File.open "sys/tpost#{i}.g", "w"

        f << command("M116", P: i)                           # wait for temp
        f << command("G90")                                  # absolute moves
        f << command("G53 G1",                               # move in to pick up tool
                     Y: Config::Tools::PARKING_Y,
                     F: Config::Speeds::PARK_XY)
        f << command("M98", P: "/macros/tool_lock.g")        # lock the tool
        f << command("G1", R: 2, Z: 0)                       # restore prior Z position (adjust bed height for new tool)
        f << command("G1", R: 0, Y: 0)                       # pull tool off parking post by restoring saved Y position
        f << command("G1", R: 0, X: 0)                       # restore prior X position
        f << command("M106", R: 2)                           # restore cooling fan speed
    end
end

task :cancel do
    FileUtils.mkdir_p "sys"
    f = File.open "sys/cancel.g", "w"
end

task :tool_lock do
    FileUtils.mkdir_p "macros"
    f = File.open "macros/tool_lock.g", "w"

    f << command("G91")    # relative moves
    f << command("G1",     # back off limit switch
                 U: 10,
                 H: 0,
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G1",     # go to torque limit switch, locking tool
                 U: 200,
                 H: 1,
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G90")    # absolute moves
end

task :tool_unlock do
    FileUtils.mkdir_p "macros"
    f = File.open "macros/tool_unlock.g", "w"

    f << command("G91")    # relative moves
    f << command("G1",     # back off limit switch
                 U: -4,
                 H: 2,
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G1",     # go to home limit switch, unlocking tool
                 U: -360,
                 H: 1,
                 F: Config::Speeds::LOCK_SPEED)
    f << command("G90")    # absolute moves
end

task :clean do
    `rm -rf sys macros`
end

task :default => [:config, :homeall, :homeu, :homex, :homey, :homez, :bed, :pause, :resume, :start, :stop, :tfree, :tpre, :tpost, :cancel, :tool_lock, :tool_unlock]
